Incorrectly reparsed file: file:/C:/Users/GIGABYTE/comprog/src/comprog.java
----- Original text: ---------------------------------------------

import javax.swing.JMenu;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;

import javax.swing.KeyStroke;
import javax.swing.ImageIcon;
import javax.swing.SwingConstants;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JRadioButtonMenuItem;
import java.awt.event.KeyEvent;
import java.awt.event.InputEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ButtonGroup;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.JPopupMenu;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;
import javax.swing.UIManager;
import javax.swing.JToolBar;
import javax.swing.JButton;
import java.awt.Container;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;

public class comprog extends JFrame implements ActionListener
{
    private JMenuBar menuBar = new JMenuBar();
    private JMenu fileMenu = new JMenu ("File");
    private JMenu editMenu = new JMenu ("Edit");
    private JMenu helpMenu = new JMenu ("Help");
    private JMenuItem newMenuItem = new JMenuItem("New", 'n');
    private JMenuItem openMenuItem = new JMenuItem("Open", 'o');
    private JMenuItem saveMenuItem = new JMenuItem("Save", 's');
    private JMenuItem saveAsMenuItem = new JMenuItem("Save As", 118);
    private JMenuItem exitMenuItem = new JMenuItem("Exit", 120);
    
    private JMenuItem cutMenuItem = new JMenuItem("Cut",new ImageIcon("cut.png"));
    private JMenuItem copyMenuItem = new JMenuItem("Copy",'c');
    private JMenuItem pasteMenuItem = new JMenuItem("Paste",new ImageIcon("save.png"));
    private JMenu optionMenu = new JMenu("Options");
    
    private JCheckBoxMenuItem readOnlyItem = new JCheckBoxMenuItem("Read-Only");
    private ButtonGroup group = new ButtonGroup();
    private JRadioButtonMenuItem insertItem = new JRadioButtonMenuItem("Insert");
    private JRadioButtonMenuItem overTypeItem = new JRadioButtonMenuItem("Overtype");
    
    private JPopupMenu popup = new JPopupMenu();
    private JMenuItem aboutMenuItem = new JMenuItem("About MenuTest");
    private JMenuItem helpMenuItem = new JMenuItem("Help Contents");
    
    private JToolBar toolBar = new JToolBar();
    String iconFiles[] = {"Java.png","open.png","copy.png","save.png"};
    String buttonLabels[] = {"JTable","TreeDemo","JTabblePane","JDesktopPane"};
    ImageIcon icons[] = new ImageIcon[iconFiles.length];
    JButton buttons[] = new JButton[buttonLabels.length];
    
    
    public comprog()
    {
         super("Menu Test");
         
         setJMenuBar(menuBar);
         menuBar.add(fileMenu);
         menuBar.add(editMenu);
         menuBar.add(helpMenu);
         
         fileMenu.add(newMenuItem);
         fileMenu.add(openMenuItem);
         fileMenu.addSeparator(); //separator
         fileMenu.add(saveMenuItem);
         fileMenu.add(saveAsMenuItem);
         fileMenu.addSeparator(); //separator
         fileMenu.add(exitMenuItem);
         
         editMenu.add(cutMenuItem);
         editMenu.add(copyMenuItem);
         editMenu.add(pasteMenuItem);
         editMenu.addSeparator();
         editMenu.add(optionMenu);
         
         optionMenu.add(readOnlyItem);
         optionMenu.addSeparator();
         optionMenu.add(insertItem);
         optionMenu.add(overTypeItem);
         
         group.add(insertItem);
         group.add(overTypeItem);
         
         copyMenuItem.setIcon(new ImageIcon("copy.png"));
         
         copyMenuItem.setAccelerator(
           KeyStroke.getKeyStroke(KeyEvent.VK_C,InputEvent.ALT_MASK));
         
         pasteMenuItem.setHorizontalTextPosition(SwingConstants.LEFT);
                
         fileMenu.setMnemonic('F');
         editMenu.setMnemonic('e');
         helpMenu.setMnemonic('H');
         
         exitMenuItem.setAccelerator(
             KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK));
         
         exitMenuItem.addActionListener(this);
         readOnlyItem.addActionListener(this);
         
         popup.add(aboutMenuItem);
         popup.add(helpMenuItem);
         
         aboutMenuItem.addActionListener(this);
         
          //1. install a mouseListerner
         addMouseListener(
            new MouseAdapter()
            {
                //2. add the ff code
                public void mouseReleased(MouseEvent e)
                {
                   if(e.isPopupTrigger()) 
                   {
                       popup.show(e.getComponent(), e.getX(), e.getY());
                   }
                }
            }
         );
         
              //creating toolbar
         Container c = getContentPane();
         c.setBackground(Color.white);
         c.setLayout(new BorderLayout());
         
         for(int i=0; i <buttonLabels.length; i++)
         {
           icons[i] = new ImageIcon(iconFiles[i]);
           buttons[i] = new JButton(icons[i]);
           buttons[i].add
                   
                   }
    }

----- Updated text: ---------------------------------------------

import javax.swing.JMenu;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;

import javax.swing.KeyStroke;
import javax.swing.ImageIcon;
import javax.swing.SwingConstants;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JRadioButtonMenuItem;
import java.awt.event.KeyEvent;
import java.awt.event.InputEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ButtonGroup;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.JPopupMenu;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;
import javax.swing.UIManager;
import javax.swing.JToolBar;
import javax.swing.JButton;
import java.awt.Container;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;

public class comprog extends JFrame implements ActionListener
{
    private JMenuBar menuBar = new JMenuBar();
    private JMenu fileMenu = new JMenu ("File");
    private JMenu editMenu = new JMenu ("Edit");
    private JMenu helpMenu = new JMenu ("Help");
    private JMenuItem newMenuItem = new JMenuItem("New", 'n');
    private JMenuItem openMenuItem = new JMenuItem("Open", 'o');
    private JMenuItem saveMenuItem = new JMenuItem("Save", 's');
    private JMenuItem saveAsMenuItem = new JMenuItem("Save As", 118);
    private JMenuItem exitMenuItem = new JMenuItem("Exit", 120);
    
    private JMenuItem cutMenuItem = new JMenuItem("Cut",new ImageIcon("cut.png"));
    private JMenuItem copyMenuItem = new JMenuItem("Copy",'c');
    private JMenuItem pasteMenuItem = new JMenuItem("Paste",new ImageIcon("save.png"));
    private JMenu optionMenu = new JMenu("Options");
    
    private JCheckBoxMenuItem readOnlyItem = new JCheckBoxMenuItem("Read-Only");
    private ButtonGroup group = new ButtonGroup();
    private JRadioButtonMenuItem insertItem = new JRadioButtonMenuItem("Insert");
    private JRadioButtonMenuItem overTypeItem = new JRadioButtonMenuItem("Overtype");
    
    private JPopupMenu popup = new JPopupMenu();
    private JMenuItem aboutMenuItem = new JMenuItem("About MenuTest");
    private JMenuItem helpMenuItem = new JMenuItem("Help Contents");
    
    private JToolBar toolBar = new JToolBar();
    String iconFiles[] = {"Java.png","open.png","copy.png","save.png"};
    String buttonLabels[] = {"JTable","TreeDemo","JTabblePane","JDesktopPane"};
    ImageIcon icons[] = new ImageIcon[iconFiles.length];
    JButton buttons[] = new JButton[buttonLabels.length];
    
    
    public comprog()
    {
         super("Menu Test");
         
         setJMenuBar(menuBar);
         menuBar.add(fileMenu);
         menuBar.add(editMenu);
         menuBar.add(helpMenu);
         
         fileMenu.add(newMenuItem);
         fileMenu.add(openMenuItem);
         fileMenu.addSeparator(); //separator
         fileMenu.add(saveMenuItem);
         fileMenu.add(saveAsMenuItem);
         fileMenu.addSeparator(); //separator
         fileMenu.add(exitMenuItem);
         
         editMenu.add(cutMenuItem);
         editMenu.add(copyMenuItem);
         editMenu.add(pasteMenuItem);
         editMenu.addSeparator();
         editMenu.add(optionMenu);
         
         optionMenu.add(readOnlyItem);
         optionMenu.addSeparator();
         optionMenu.add(insertItem);
         optionMenu.add(overTypeItem);
         
         group.add(insertItem);
         group.add(overTypeItem);
         
         copyMenuItem.setIcon(new ImageIcon("copy.png"));
         
         copyMenuItem.setAccelerator(
           KeyStroke.getKeyStroke(KeyEvent.VK_C,InputEvent.ALT_MASK));
         
         pasteMenuItem.setHorizontalTextPosition(SwingConstants.LEFT);
                
         fileMenu.setMnemonic('F');
         editMenu.setMnemonic('e');
         helpMenu.setMnemonic('H');
         
         exitMenuItem.setAccelerator(
             KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK));
         
         exitMenuItem.addActionListener(this);
         readOnlyItem.addActionListener(this);
         
         popup.add(aboutMenuItem);
         popup.add(helpMenuItem);
         
         aboutMenuItem.addActionListener(this);
         
          //1. install a mouseListerner
         addMouseListener(
            new MouseAdapter()
            {
                //2. add the ff code
                public void mouseReleased(MouseEvent e)
                {
                   if(e.isPopupTrigger()) 
                   {
                       popup.show(e.getComponent(), e.getX(), e.getY());
                   }
                }
            }
         );
         
              //creating toolbar
         Container c = getContentPane();
         c.setBackground(Color.white);
         c.setLayout(new BorderLayout());
         
         for(int i=0; i <buttonLabels.length; i++)
         {
           icons[i] = new ImageIcon(iconFiles[i]);
           buttons[i] = new JButton(icons[i]);
           buttons[i].add;
                   
                   }
    }

----- Errors: ---------------------------------------------
Expected diags: [file:/C:/Users/GIGABYTE/comprog/src/comprog.java:ERROR:830:837:5046:30:8:compiler.err.does.not.override.abstract:comprog is not abstract and does not override abstract method actionPerformed(ActionEvent) in ActionListener, file:/C:/Users/GIGABYTE/comprog/src/comprog.java:ERROR:5044:5044:5044:-1:-1:compiler.err.premature.eof:reached end of file while parsing, file:/C:/Users/GIGABYTE/comprog/src/comprog.java:ERROR:4983:4993:4997:140:22:compiler.err.not.stmt:not a statement], actual diags: [file:/C:/Users/GIGABYTE/comprog/src/comprog.java:ERROR:830:837:5046:30:8:compiler.err.does.not.override.abstract:comprog is not abstract and does not override abstract method actionPerformed(ActionEvent) in ActionListener, file:/C:/Users/GIGABYTE/comprog/src/comprog.java:ERROR:5045:5045:5045:143:6:compiler.err.premature.eof:reached end of file while parsing, file:/C:/Users/GIGABYTE/comprog/src/comprog.java:ERROR:4983:4993:4997:140:22:compiler.err.not.stmt:not a statement]
